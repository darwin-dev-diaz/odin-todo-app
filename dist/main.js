(()=>{"use strict";var n={430:(n,e,t)=>{t.d(e,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([n.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const s=i},208:(n,e,t)=>{t.d(e,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([n.id,':root {\n  --mon-black: #272821;\n  --mon-red: #fb0170;\n  --mon-purple: #ad79f5;\n  --mon-blue: #13dcf2;\n  --mon-green: #94e400;\n  --mon-orange: #e78403;\n  --mon-yellow: #ded15e;\n  --mon-grey: #3e3d32;\n  --mon-white: #f8f8f1;\n}\nhtml {\n  background-color: var(--mon-black);\n}\n.hidden {\n  display: none !important;\n}\n.blur {\n  filter: blur(10px);\n  pointer-events: none;\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  font-family: "Inconsolata";\n}\n.page {\n  height: 100vh;\n  width: 100vw;\n  background-color: var(--mon-white);\n\n  display: grid;\n  grid-template-columns: 25% auto;\n  grid-template-rows: 15% auto;\n}\n\nheader {\n  background-color: var(--mon-black);\n  grid-column-start: span 2;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nh1 {\n  color: white;\n  font-size: 40px;\n  letter-spacing: 1px;\n  font-weight: bold;\n}\n\n.side-bar {\n  display: flex;\n  padding-top: 70px;\n  /* align-items: center; */\n  justify-content: center;\n  background-color: var(--mon-grey);\n  color: var(--mon-white);\n  overflow-y: auto;\n}\n.nav {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  font-size: 30px;\n  font-weight: bold;\n}\n\n.nav-item {\n  cursor: pointer;\n}\n\n.nav-item-selected {\n  text-decoration: underline;\n  color: var(--mon-blue);\n}\n\n.nav-item:hover {\n  text-decoration: underline;\n}\n\n.projects-nav {\n  padding-left: 15px;\n  font-size: 25px;\n  display: flex;\n  padding-top: 10px;\n  flex-direction: column;\n  gap: 10px;\n}\n.projects-folder--title {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n}\n\n.project-index {\n  width: fit-content;\n}\n.project-index:hover {\n  cursor: pointer;\n  text-decoration: underline;\n}\n\n/* svg{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n} */\n.add-project {\n  width: 20px;\n  height: 20px;\n  fill: var(--mon-white);\n  background-color: var(--mon-red);\n  border-radius: 100px;\n  cursor: pointer;\n}\n\n.create-project-pop-up {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 300px;\n  height: 300px;\n  background-color: var(--mon-red);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.create-project-title {\n  color: var(--mon-black);\n}\n.create-project-field {\n  padding: 10px;\n  font-size: 20px;\n}\n\n.create-project-btns {\n  margin-top: 30px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n.create-project-btn,\n.create-project-cancel {\n  padding: 10px;\n  font-size: 15px;\n}\n\n.main {\n  position: relative;\n  background-color: #63635b;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n}\n\nh2 {\n  color: var(--mon-white);\n  font-size: 30px;\n  font-weight: bold;\n}\n\n.task-list {\n  position: relative;\n  background-color: var(--mon-grey);\n  width: 90%;\n  height: 550px;\n  border-radius: 10px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  gap: 10px;\n}\n\n.task {\n  width: 95%;\n  height: 60px;\n  background-color: var(--mon-white);\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n\n  border-radius: 10px;\n  gap: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.task.completed{\n  background-color: #999996;\n}\n\n.task--left {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  align-items: center;\n}\n.task--right {\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n  align-items: center;\n  justify-content: end;\n\n  width: 45%;\n}\n\n.priority--low {\n  border-left: var(--mon-green) 10px solid;\n}\n.priority--medium {\n  border-left: var(--mon-orange) 10px solid;\n}\n.priority--high {\n  border-left: var(--mon-red) 10px solid;\n}\n\n.task--status {\n  height: 20px;\n  width: 20px;\n  border: 3px var(--mon-grey) solid;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.task--status:hover {\n  cursor: pointer;\n}\n\n.task--status > div{\n  width: 80%;\n  height: 80%;\n  border-radius: 2px;\n  background-color: var(--mon-grey);\n  display: none;\n}\n\n.task.completed .task--status > div{\n  display: block;\n}\n\n.task.completed .task--text,\n.task.completed .task--date{\n  text-decoration: line-through;\n}\n\n.task--title {\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.task--info {\n  justify-self: end;\n  \n  border: var(--mon-grey) solid 3px;\n  padding: 7px;\n  border-radius: 5px;\n}\n.task--info:hover {\n  background-color: var(--mon-grey);\n  color: var(--mon-white);\n  cursor: pointer;\n}\n\n.task--date {\n  font-size: 18px;\n  width: 200px;\n  text-align: center;\n}\n\n.task--edit,\n.task--delete {\n  width: 25px;\n  height: 25px;\n\n}\n.task--edit:hover{\n  cursor: pointer;\n  fill: var(--mon-blue);\n}\n.task--delete:hover{\n  cursor: pointer;\n  fill: var(--mon-red);\n}\n.add-task {\n  z-index: 999;\n  position: fixed;\n  width: 60px;\n  height: 60px;\n  background-color: var(--mon-green);\n  fill: white;\n  border-radius: 50px;\n  bottom: 30px;\n  right: 50px;\n  cursor: pointer;\n\n}\n.create-task-pop-up,\n.edit-task-pop-up{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 810px;\n  height: 480px;\n  background-color: red;\n\n  display: flex;\n  flex-direction: column;\n}\n\n.create-task-pop-up--header {\n  height: 10%;\n  padding: 10px;\n  background-color: var(--mon-black);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.create-task-pop-up--body {\n  background-color: var(--mon-white);\n  height: 87%;\n  display: flex;\n  flex-direction: column;\n}\n\n\n.project-selection-container{\n  display: flex;\n  font-size: 20px;\n  font-weight: bold;\n  justify-content: center;\n  align-items: center;\n}\n#create-task-form,\n#edit-task-form {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  height: 100%;\n  padding: 20px;\n  gap: 15px;\n}\n\n.create-task-field {\n  border: none;\n  background-color: inherit;\n}\ntextarea {\n  resize: none;\n  border: none;\n  overflow: auto;\n  outline: none;\n\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n\n  resize: none; /*remove the resize handle on the bottom right*/\n}\n.task-title {\n  font-size: 25px;\n  width: 100%;\n  height: 30px;\n}\n.task-description {\n  font-size: 20px;\n  margin-bottom: auto;\n  width: 75%;\n  height: 50%;\n}\n.task-date {\n  padding: 10px;\n  border: 2px solid var(--mon-black);\n  border-radius: 5px;\n  font-size: 16px;\n}\n.priority-selection {\n  font-size: 20px;\n  font-weight: bold;\n}\n.create-new__priority-btn {\n  display: inline-block;\n  margin: 0 1.5rem 0 -5px;\n  border-radius: 3px;\n  font-size: 1rem;\n  text-transform: uppercase;\n  font-weight: 700;\n  cursor: pointer;\n  -webkit-transition: all 0.3s;\n  transition: all 0.3s;\n}\n.create-new__priority input[type="radio"] {\n  position: relative;\n  left: 2.2rem;\n  height: 1px;\n  width: 1px;\n  padding: 0;\n  margin: 0;\n  opacity: 0;\n}\n\n.create-task-btn,\n.cancel-task-btn,\n.edit-task-btn,\n.cancel-edit-btn{\n  font-size: 15px;\n  border: 2px solid var(--mon-black);\n  border-radius: 5px;\n  padding: 10px;\n  background-color: inherit;\n}\n\n.create-task-btn:hover,\n.cancel-task-btn:hover,\n.edit-task-btn:hover,\n.cancel-edit-btn:hover\n {\n  background-color: var(--mon-grey);\n  border: 2px solid var(--mon-white);\n  color: var(--mon-white);\n  cursor: pointer;\n}\n.create-task-bottom-row {\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.task-info-pop-up {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 700px;\n  height: 200px;\n  padding: 30px;\n  background-color: var(--mon-white);\n\n  display: flex;\n  flex-direction: column;\n}\n\n.task-info-close{\n  align-self: flex-end;\n  width: 35px;\n  height: 35px;\n}\n.task-info-close:hover{\n  cursor:pointer;\n  fill: var(--mon-red);\n}\n\n.task-info-title{\n  font-size: 30px;\n  font-weight: bold;\n}\n\n.task-info-project,\n.task-info-priority,\n.task-info-date,\n.task-info-description{\n  font-size: 20px;\n  \n}\n\n.task-info-project>span:first-child,\n.task-info-priority>span:first-child,\n.task-info-date>span:first-child,\n.task-info-description>span:first-child{\n  font-weight: bold;\n\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\n  --mon-black: #272821;\n  --mon-red: #fb0170;\n  --mon-purple: #ad79f5;\n  --mon-blue: #13dcf2;\n  --mon-green: #94e400;\n  --mon-orange: #e78403;\n  --mon-yellow: #ded15e;\n  --mon-grey: #3e3d32;\n  --mon-white: #f8f8f1;\n}\nhtml {\n  background-color: var(--mon-black);\n}\n.hidden {\n  display: none !important;\n}\n.blur {\n  filter: blur(10px);\n  pointer-events: none;\n  -webkit-user-select: none; /* Safari */\n  -ms-user-select: none; /* IE 10 and IE 11 */\n  user-select: none; /* Standard syntax */\n}\nbody {\n  font-family: "Inconsolata";\n}\n.page {\n  height: 100vh;\n  width: 100vw;\n  background-color: var(--mon-white);\n\n  display: grid;\n  grid-template-columns: 25% auto;\n  grid-template-rows: 15% auto;\n}\n\nheader {\n  background-color: var(--mon-black);\n  grid-column-start: span 2;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\nh1 {\n  color: white;\n  font-size: 40px;\n  letter-spacing: 1px;\n  font-weight: bold;\n}\n\n.side-bar {\n  display: flex;\n  padding-top: 70px;\n  /* align-items: center; */\n  justify-content: center;\n  background-color: var(--mon-grey);\n  color: var(--mon-white);\n  overflow-y: auto;\n}\n.nav {\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  font-size: 30px;\n  font-weight: bold;\n}\n\n.nav-item {\n  cursor: pointer;\n}\n\n.nav-item-selected {\n  text-decoration: underline;\n  color: var(--mon-blue);\n}\n\n.nav-item:hover {\n  text-decoration: underline;\n}\n\n.projects-nav {\n  padding-left: 15px;\n  font-size: 25px;\n  display: flex;\n  padding-top: 10px;\n  flex-direction: column;\n  gap: 10px;\n}\n.projects-folder--title {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n}\n\n.project-index {\n  width: fit-content;\n}\n.project-index:hover {\n  cursor: pointer;\n  text-decoration: underline;\n}\n\n/* svg{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n} */\n.add-project {\n  width: 20px;\n  height: 20px;\n  fill: var(--mon-white);\n  background-color: var(--mon-red);\n  border-radius: 100px;\n  cursor: pointer;\n}\n\n.create-project-pop-up {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 300px;\n  height: 300px;\n  background-color: var(--mon-red);\n\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  align-items: center;\n}\n\n.create-project-title {\n  color: var(--mon-black);\n}\n.create-project-field {\n  padding: 10px;\n  font-size: 20px;\n}\n\n.create-project-btns {\n  margin-top: 30px;\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n}\n.create-project-btn,\n.create-project-cancel {\n  padding: 10px;\n  font-size: 15px;\n}\n\n.main {\n  position: relative;\n  background-color: #63635b;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n}\n\nh2 {\n  color: var(--mon-white);\n  font-size: 30px;\n  font-weight: bold;\n}\n\n.task-list {\n  position: relative;\n  background-color: var(--mon-grey);\n  width: 90%;\n  height: 550px;\n  border-radius: 10px;\n  overflow-y: auto;\n  overflow-x: hidden;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  gap: 10px;\n}\n\n.task {\n  width: 95%;\n  height: 60px;\n  background-color: var(--mon-white);\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n\n  border-radius: 10px;\n  gap: 10px;\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.task.completed{\n  background-color: #999996;\n}\n\n.task--left {\n  display: flex;\n  flex-direction: row;\n  gap: 10px;\n  align-items: center;\n}\n.task--right {\n  display: flex;\n  flex-direction: row;\n  gap: 20px;\n  align-items: center;\n  justify-content: end;\n\n  width: 45%;\n}\n\n.priority--low {\n  border-left: var(--mon-green) 10px solid;\n}\n.priority--medium {\n  border-left: var(--mon-orange) 10px solid;\n}\n.priority--high {\n  border-left: var(--mon-red) 10px solid;\n}\n\n.task--status {\n  height: 20px;\n  width: 20px;\n  border: 3px var(--mon-grey) solid;\n  border-radius: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.task--status:hover {\n  cursor: pointer;\n}\n\n.task--status > div{\n  width: 80%;\n  height: 80%;\n  border-radius: 2px;\n  background-color: var(--mon-grey);\n  display: none;\n}\n\n.task.completed .task--status > div{\n  display: block;\n}\n\n.task.completed .task--text,\n.task.completed .task--date{\n  text-decoration: line-through;\n}\n\n.task--title {\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.task--info {\n  justify-self: end;\n  \n  border: var(--mon-grey) solid 3px;\n  padding: 7px;\n  border-radius: 5px;\n}\n.task--info:hover {\n  background-color: var(--mon-grey);\n  color: var(--mon-white);\n  cursor: pointer;\n}\n\n.task--date {\n  font-size: 18px;\n  width: 200px;\n  text-align: center;\n}\n\n.task--edit,\n.task--delete {\n  width: 25px;\n  height: 25px;\n\n}\n.task--edit:hover{\n  cursor: pointer;\n  fill: var(--mon-blue);\n}\n.task--delete:hover{\n  cursor: pointer;\n  fill: var(--mon-red);\n}\n.add-task {\n  z-index: 999;\n  position: fixed;\n  width: 60px;\n  height: 60px;\n  background-color: var(--mon-green);\n  fill: white;\n  border-radius: 50px;\n  bottom: 30px;\n  right: 50px;\n  cursor: pointer;\n\n}\n.create-task-pop-up,\n.edit-task-pop-up{\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 810px;\n  height: 480px;\n  background-color: red;\n\n  display: flex;\n  flex-direction: column;\n}\n\n.create-task-pop-up--header {\n  height: 10%;\n  padding: 10px;\n  background-color: var(--mon-black);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.create-task-pop-up--body {\n  background-color: var(--mon-white);\n  height: 87%;\n  display: flex;\n  flex-direction: column;\n}\n\n\n.project-selection-container{\n  display: flex;\n  font-size: 20px;\n  font-weight: bold;\n  justify-content: center;\n  align-items: center;\n}\n#create-task-form,\n#edit-task-form {\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  height: 100%;\n  padding: 20px;\n  gap: 15px;\n}\n\n.create-task-field {\n  border: none;\n  background-color: inherit;\n}\ntextarea {\n  resize: none;\n  border: none;\n  overflow: auto;\n  outline: none;\n\n  -webkit-box-shadow: none;\n  -moz-box-shadow: none;\n  box-shadow: none;\n\n  resize: none; /*remove the resize handle on the bottom right*/\n}\n.task-title {\n  font-size: 25px;\n  width: 100%;\n  height: 30px;\n}\n.task-description {\n  font-size: 20px;\n  margin-bottom: auto;\n  width: 75%;\n  height: 50%;\n}\n.task-date {\n  padding: 10px;\n  border: 2px solid var(--mon-black);\n  border-radius: 5px;\n  font-size: 16px;\n}\n.priority-selection {\n  font-size: 20px;\n  font-weight: bold;\n}\n.create-new__priority-btn {\n  display: inline-block;\n  margin: 0 1.5rem 0 -5px;\n  border-radius: 3px;\n  font-size: 1rem;\n  text-transform: uppercase;\n  font-weight: 700;\n  cursor: pointer;\n  -webkit-transition: all 0.3s;\n  transition: all 0.3s;\n}\n.create-new__priority input[type="radio"] {\n  position: relative;\n  left: 2.2rem;\n  height: 1px;\n  width: 1px;\n  padding: 0;\n  margin: 0;\n  opacity: 0;\n}\n\n.create-task-btn,\n.cancel-task-btn,\n.edit-task-btn,\n.cancel-edit-btn{\n  font-size: 15px;\n  border: 2px solid var(--mon-black);\n  border-radius: 5px;\n  padding: 10px;\n  background-color: inherit;\n}\n\n.create-task-btn:hover,\n.cancel-task-btn:hover,\n.edit-task-btn:hover,\n.cancel-edit-btn:hover\n {\n  background-color: var(--mon-grey);\n  border: 2px solid var(--mon-white);\n  color: var(--mon-white);\n  cursor: pointer;\n}\n.create-task-bottom-row {\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.task-info-pop-up {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 700px;\n  height: 200px;\n  padding: 30px;\n  background-color: var(--mon-white);\n\n  display: flex;\n  flex-direction: column;\n}\n\n.task-info-close{\n  align-self: flex-end;\n  width: 35px;\n  height: 35px;\n}\n.task-info-close:hover{\n  cursor:pointer;\n  fill: var(--mon-red);\n}\n\n.task-info-title{\n  font-size: 30px;\n  font-weight: bold;\n}\n\n.task-info-project,\n.task-info-priority,\n.task-info-date,\n.task-info-description{\n  font-size: 20px;\n  \n}\n\n.task-info-project>span:first-child,\n.task-info-priority>span:first-child,\n.task-info-date>span:first-child,\n.task-info-description>span:first-child{\n  font-weight: bold;\n\n}\n'],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],A=o.base?c[0]+o.base:c[0],l=a[A]||0,d="".concat(A," ").concat(l);a[A]=l+1;var u=t(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var f=r(p,o);o.byIndex=s,e.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),A=0;A<a.length;A++){var l=t(a[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},659:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(72),e=t.n(n),o=t(825),r=t.n(o),a=t(659),i=t.n(a),s=t(56),c=t.n(s),A=t(540),l=t.n(A),d=t(113),u=t.n(d),p=t(430),f={};f.styleTagTransform=u(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),e()(p.A,f),p.A&&p.A.locals&&p.A.locals;var m=t(208),h={};function g(n){return JSON.stringify(n,(function(n,e){return"function"==typeof e?"/Function("+e.toString()+")/":e}))}function C(n){return JSON.parse(n,(function(n,e){return"string"==typeof e&&e.startsWith("/Function(")&&e.endsWith(")/")?(e=e.substring(10,e.length-2),(0,eval)("("+e+")")):e}))}h.styleTagTransform=u(),h.setAttributes=c(),h.insert=i().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),e()(m.A,h),m.A&&m.A.locals&&m.A.locals;const E=[],b=[];function B(){document.querySelector(".create-project-pop-up").classList.toggle("hidden"),document.querySelector(".page").classList.toggle("blur")}function k(){document.querySelector(".create-task-pop-up").classList.toggle("hidden"),document.querySelector(".page").classList.toggle("blur")}function y(){document.querySelector(".edit-task-pop-up").classList.toggle("hidden"),document.querySelector(".page").classList.toggle("blur")}function x(){document.querySelector(".task-info-pop-up").classList.toggle("hidden"),document.querySelector(".page").classList.toggle("blur")}const w={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function v(n){return(e={})=>{const t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const S={date:v({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:v({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:v({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},j={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function M(n){return(e,t)=>{let o;if("formatting"===(t?.context?String(t.context):"standalone")&&n.formattingValues){const e=n.defaultFormattingWidth||n.defaultWidth,r=t?.width?String(t.width):e;o=n.formattingValues[r]||n.formattingValues[e]}else{const e=n.defaultWidth,r=t?.width?String(t.width):n.defaultWidth;o=n.values[r]||n.values[e]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const L={ordinalNumber:(n,e)=>{const t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:M({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:M({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:n=>n-1}),month:M({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:M({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:M({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function T(n){return(e,t={})=>{const o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],a=e.match(r);if(!a)return null;const i=a[0],s=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],c=Array.isArray(s)?function(n,e){for(let e=0;e<n.length;e++)if(n[e].test(i))return e}(s):function(n,e){for(const e in n)if(Object.prototype.hasOwnProperty.call(n,e)&&n[e].test(i))return e}(s);let A;return A=n.valueCallback?n.valueCallback(c):c,A=t.valueCallback?t.valueCallback(A):A,{value:A,rest:e.slice(i.length)}}}const q={ordinalNumber:(W={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:n=>parseInt(n,10)},(n,e={})=>{const t=n.match(W.matchPattern);if(!t)return null;const o=t[0],r=n.match(W.parsePattern);if(!r)return null;let a=W.valueCallback?W.valueCallback(r[0]):r[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:n.slice(o.length)}}),era:T({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:T({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:n=>n+1}),month:T({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:T({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:T({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var W;const Y={code:"en-US",formatDistance:(n,e,t)=>{let o;const r=w[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),t?.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:S,formatRelative:(n,e,t,o)=>j[n],localize:L,match:q,options:{weekStartsOn:0,firstWeekContainsDate:1}};let z={};function D(){return z}Math.pow(10,8);const H=6048e5,P=864e5;function I(n){const e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new n.constructor(+n):"number"==typeof n||"[object Number]"===e||"string"==typeof n||"[object String]"===e?new Date(n):new Date(NaN)}function O(n){const e=I(n);return e.setHours(0,0,0,0),e}function N(n){const e=I(n),t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),+n-+t}function F(n,e){return n instanceof Date?new n.constructor(e):new Date(e)}function X(n){const e=I(n);return function(n,e){const t=O(n),o=O(e),r=+t-N(t),a=+o-N(o);return Math.round((r-a)/P)}(e,function(n){const e=I(n),t=F(n,0);return t.setFullYear(e.getFullYear(),0,1),t.setHours(0,0,0,0),t}(e))+1}function V(n,e){const t=D(),o=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??t.weekStartsOn??t.locale?.options?.weekStartsOn??0,r=I(n),a=r.getDay(),i=(a<o?7:0)+a-o;return r.setDate(r.getDate()-i),r.setHours(0,0,0,0),r}function U(n){return V(n,{weekStartsOn:1})}function Q(n){const e=I(n),t=e.getFullYear(),o=F(n,0);o.setFullYear(t+1,0,4),o.setHours(0,0,0,0);const r=U(o),a=F(n,0);a.setFullYear(t,0,4),a.setHours(0,0,0,0);const i=U(a);return e.getTime()>=r.getTime()?t+1:e.getTime()>=i.getTime()?t:t-1}function Z(n){const e=I(n),t=+U(e)-+function(n){const e=Q(n),t=F(n,0);return t.setFullYear(e,0,4),t.setHours(0,0,0,0),U(t)}(e);return Math.round(t/H)+1}function G(n,e){const t=I(n),o=t.getFullYear(),r=D(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=F(n,0);i.setFullYear(o+1,0,a),i.setHours(0,0,0,0);const s=V(i,e),c=F(n,0);c.setFullYear(o,0,a),c.setHours(0,0,0,0);const A=V(c,e);return t.getTime()>=s.getTime()?o+1:t.getTime()>=A.getTime()?o:o-1}function R(n,e){const t=I(n),o=+V(t,e)-+function(n,e){const t=D(),o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??t.firstWeekContainsDate??t.locale?.options?.firstWeekContainsDate??1,r=G(n,e),a=F(n,0);return a.setFullYear(r,0,o),a.setHours(0,0,0,0),V(a,e)}(t,e);return Math.round(o/H)+1}function J(n,e){return(n<0?"-":"")+Math.abs(n).toString().padStart(e,"0")}const $={y(n,e){const t=n.getFullYear(),o=t>0?t:1-t;return J("yy"===e?o%100:o,e.length)},M(n,e){const t=n.getMonth();return"M"===e?String(t+1):J(t+1,2)},d:(n,e)=>J(n.getDate(),e.length),a(n,e){const t=n.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.toUpperCase();case"aaa":return t;case"aaaaa":return t[0];default:return"am"===t?"a.m.":"p.m."}},h:(n,e)=>J(n.getHours()%12||12,e.length),H:(n,e)=>J(n.getHours(),e.length),m:(n,e)=>J(n.getMinutes(),e.length),s:(n,e)=>J(n.getSeconds(),e.length),S(n,e){const t=e.length,o=n.getMilliseconds();return J(Math.trunc(o*Math.pow(10,t-3)),e.length)}},_={G:function(n,e,t){const o=n.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){const e=n.getFullYear(),o=e>0?e:1-e;return t.ordinalNumber(o,{unit:"year"})}return $.y(n,e)},Y:function(n,e,t,o){const r=G(n,o),a=r>0?r:1-r;return"YY"===e?J(a%100,2):"Yo"===e?t.ordinalNumber(a,{unit:"year"}):J(a,e.length)},R:function(n,e){return J(Q(n),e.length)},u:function(n,e){return J(n.getFullYear(),e.length)},Q:function(n,e,t){const o=Math.ceil((n.getMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return J(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){const o=Math.ceil((n.getMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return J(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){const o=n.getMonth();switch(e){case"M":case"MM":return $.M(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){const o=n.getMonth();switch(e){case"L":return String(o+1);case"LL":return J(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,o){const r=R(n,o);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):J(r,e.length)},I:function(n,e,t){const o=Z(n);return"Io"===e?t.ordinalNumber(o,{unit:"week"}):J(o,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getDate(),{unit:"date"}):$.d(n,e)},D:function(n,e,t){const o=X(n);return"Do"===e?t.ordinalNumber(o,{unit:"dayOfYear"}):J(o,e.length)},E:function(n,e,t){const o=n.getDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){const r=n.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return J(a,2);case"eo":return t.ordinalNumber(a,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){const r=n.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return J(a,e.length);case"co":return t.ordinalNumber(a,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){const o=n.getDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return J(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){const o=n.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){const o=n.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){const o=n.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){let e=n.getHours()%12;return 0===e&&(e=12),t.ordinalNumber(e,{unit:"hour"})}return $.h(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getHours(),{unit:"hour"}):$.H(n,e)},K:function(n,e,t){const o=n.getHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):J(o,e.length)},k:function(n,e,t){let o=n.getHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):J(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getMinutes(),{unit:"minute"}):$.m(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getSeconds(),{unit:"second"}):$.s(n,e)},S:function(n,e){return $.S(n,e)},X:function(n,e,t){const o=n.getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return nn(o);case"XXXX":case"XX":return en(o);default:return en(o,":")}},x:function(n,e,t){const o=n.getTimezoneOffset();switch(e){case"x":return nn(o);case"xxxx":case"xx":return en(o);default:return en(o,":")}},O:function(n,e,t){const o=n.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+K(o,":");default:return"GMT"+en(o,":")}},z:function(n,e,t){const o=n.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+K(o,":");default:return"GMT"+en(o,":")}},t:function(n,e,t){return J(Math.trunc(n.getTime()/1e3),e.length)},T:function(n,e,t){return J(n.getTime(),e.length)}};function K(n,e=""){const t=n>0?"-":"+",o=Math.abs(n),r=Math.trunc(o/60),a=o%60;return 0===a?t+String(r):t+String(r)+e+J(a,2)}function nn(n,e){return n%60==0?(n>0?"-":"+")+J(Math.abs(n)/60,2):en(n,e)}function en(n,e=""){const t=n>0?"-":"+",o=Math.abs(n);return t+J(Math.trunc(o/60),2)+e+J(o%60,2)}const tn=(n,e)=>{switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},on=(n,e)=>{switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},rn={p:on,P:(n,e)=>{const t=n.match(/(P+)(p+)?/)||[],o=t[1],r=t[2];if(!r)return tn(n,e);let a;switch(o){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",tn(o,e)).replace("{{time}}",on(r,e))}},an=/^D+$/,sn=/^Y+$/,cn=["D","DD","YY","YYYY"];function An(n){if(!(e=n,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof n))return!1;var e;const t=I(n);return!isNaN(Number(t))}const ln=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,dn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,un=/^'([^]*?)'?$/,pn=/''/g,fn=/[a-zA-Z]/;function mn(n){const e=n.match(un);return e?e[1].replace(pn,"'"):n}let hn=C(localStorage.getItem("all tasks")).projTaskList,gn="all tasks";document.querySelectorAll(".add-project, .create-project-cancel").forEach((n=>{n.addEventListener("click",(()=>{Cn.reset(),B()}))}));const Cn=document.querySelector("#create-project-form");function En(){const n=document.querySelector(".projects-nav"),e=document.querySelector(".nav-item-selected").textContent;n.innerHTML="";const t=document.querySelector("#projects-drop-down");t.innerHTML="";const o=document.querySelector("#projects-drop-down-edit");o.innerHTML='<option value="main">Main</option>',Object.values(localStorage).map((n=>C(n))).forEach((r=>{const[a,i]=function(n){const e=document.createElement("li");e.classList.add("project-index","nav-item"),e.textContent=n,e.addEventListener("click",(n=>{document.querySelectorAll(".nav-item").forEach((n=>n.classList.remove("nav-item-selected"))),n.target.classList.add("nav-item-selected")}));const t=document.createElement("option");return t.setAttribute("value",n),t.textContent=n,[e,t]}(r.title);r.title===e&&a.classList.add("nav-item-selected"),a.addEventListener("click",(()=>{const n=C(localStorage.getItem(a.textContent)).projTaskList;console.log(n),hn=n,gn=a.textContent,yn()})),n.appendChild(a),t.appendChild(i);const s=i.cloneNode(!0);o.appendChild(s)}))}Cn.addEventListener("submit",(n=>{n.preventDefault();let e="";e=[...new FormData(n.target).entries()][0][1],function(n){let e=[];const t={title:n,projTaskList:e,addNewTask:t=>{t.project!==n||e.includes(t)||e.push(t)},removeTaskFromList:n=>{e.splice(e.indexOf(n),1)}};b.push(t),localStorage.setItem(n,g(t))}(e),Cn.reset(),En(),B()})),document.querySelector(".task-info-close").addEventListener("click",(()=>{x()}));let bn=null;document.querySelector(".cancel-edit-btn").addEventListener("click",(()=>{bn=null,y()})),document.querySelector("#edit-task-form").addEventListener("submit",(n=>{n.preventDefault();const e=bn.project,t=C(localStorage.getItem("all tasks")),o=t.projTaskList.indexOf(t.projTaskList.filter((n=>n.title===bn.title))[0]),r=new FormData(n.target),a=[...r.entries()][0][1],i=[...r.entries()][1][1],s=[...r.entries()][2][1],c=[...r.entries()][3][1],A=[...r.entries()][4][1];if(bn.title=a,bn.description=i,bn.dueDate=s,bn.project=c,bn.priority=A,"all tasks"===e&&"all tasks"!==c){const n=C(localStorage.getItem(c));n.projTaskList.push(bn),localStorage.setItem(c,g(n))}else if("all tasks"!==e&&e!==c){const n=C(localStorage.getItem(c));n.projTaskList.push(bn),localStorage.setItem(c,g(n));const t=C(localStorage.getItem(e)),o=t.projTaskList.filter((n=>n.title===bn.title))[0],r=t.projTaskList.indexOf(o);t.projTaskList.splice(r,1),localStorage.setItem(e,g(t))}t.projTaskList.splice(o,1,bn),localStorage.setItem("all tasks",g(t)),yn(),y()}));const Bn=document.querySelectorAll(".add-task, .cancel-task-btn"),kn=document.querySelector("#create-task-form");function yn(){const n=document.querySelector(".task-list");n.innerHTML="",hn=C(localStorage.getItem(gn)).projTaskList,hn.forEach((e=>{const t=function(n,e,t){const o=D(),r=t?.locale??o.locale??Y,a=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,i=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,s=I(n);if(!An(s))throw new RangeError("Invalid time value");let c=e.match(dn).map((n=>{const e=n[0];return"p"===e||"P"===e?(0,rn[e])(n,r.formatLong):n})).join("").match(ln).map((n=>{if("''"===n)return{isToken:!1,value:"'"};const e=n[0];if("'"===e)return{isToken:!1,value:mn(n)};if(_[e])return{isToken:!0,value:n};if(e.match(fn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:n}}));r.localize.preprocessor&&(c=r.localize.preprocessor(s,c));const A={firstWeekContainsDate:a,weekStartsOn:i,locale:r};return c.map((o=>{if(!o.isToken)return o.value;const a=o.value;return(!t?.useAdditionalWeekYearTokens&&function(n){return sn.test(n)}(a)||!t?.useAdditionalDayOfYearTokens&&function(n){return an.test(n)}(a))&&function(n,e,t){const o=function(n,e,t){const o="Y"===n[0]?"years":"days of the month";return`Use \`${n.toLowerCase()}\` instead of \`${n}\` (in \`${e}\`) for formatting ${o} to the input \`${t}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(n,e,t);if(console.warn(o),cn.includes(n))throw new RangeError(o)}(a,e,String(n)),(0,_[a[0]])(s,a,r.localize,A)})).join("")}(new Date(e.dueDate.split("-")),"eeee, MMMM do"),o=function(n,e,t,o,r=!1){const a=document.createElement("div");a.classList.add("task",`priority--${t}`),r&&a.classList.add("completed");const i=document.createElement("div");i.classList.add("task--left");const s=document.createElement("div");s.classList.add("task--status");const c=document.createElement("div");s.appendChild(c);const A=document.createElement("div");A.classList.add("task--text");const l=document.createElement("h3");l.classList.add("task--title"),l.textContent=n;const d=document.createElement("p");d.classList.add("task--description"),d.textContent=e,A.appendChild(l),A.appendChild(d),i.appendChild(s),i.appendChild(A);const u=document.createElement("div");u.classList.add("task--right");const p=document.createElement("div");p.classList.add("task--info"),p.textContent="INFO";const f=document.createElement("div");f.classList.add("task--date"),f.textContent=o,u.appendChild(p),u.appendChild(f);const m=document.createElementNS("http://www.w3.org/2000/svg","svg");m.setAttribute("class","task--edit"),m.setAttribute("xmlns","http://www.w3.org/2000/svg"),m.setAttribute("viewBox","0 0 24 24"),m.innerHTML='\n    <title>file-edit-outline</title>\n    <path d="M10 20H6V4H13V9H18V12.1L20 10.1V8L14 2H6C4.9 2 4 2.9 4 4V20C4 21.1 4.9 22 6 22H10V20M20.2 13C20.3 13 20.5 13.1 20.6 13.2L21.9 14.5C22.1 14.7 22.1 15.1 21.9 15.3L20.9 16.3L18.8 14.2L19.8 13.2C19.9 13.1 20 13 20.2 13M20.2 16.9L14.1 23H12V20.9L18.1 14.8L20.2 16.9Z"/>\n  ';const h=document.createElementNS("http://www.w3.org/2000/svg","svg");return h.setAttribute("class","task--delete"),h.setAttribute("xmlns","http://www.w3.org/2000/svg"),h.setAttribute("viewBox","0 0 24 24"),h.innerHTML='\n    <title>trash-can-outline</title>\n    <path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z"/>\n  ',u.appendChild(m),u.appendChild(h),a.appendChild(i),a.appendChild(u),a}(e.title,e.description,e.priority,t,e.completed);o.querySelector(".task--delete").addEventListener("click",(()=>{!function(n){const e=C(localStorage.getItem("all tasks"));if(e.projTaskList.splice(E.indexOf(n),1),E.splice(E.indexOf(n),1),localStorage.setItem(e.title,g(e)),"all tasks"!==n.project){const e=C(localStorage.getItem(n.project)),t=e.projTaskList.filter((e=>e.title===n.title))[0],o=e.projTaskList.indexOf(t);e.projTaskList.splice(o,1),localStorage.setItem(e.title,g(e))}}(e),hn=C(localStorage.getItem(gn)).projTaskList,yn()})),o.querySelector(".task--edit").addEventListener("click",(()=>{bn=e,function(n){const e=document.querySelector(".edit-task-pop-up");e.querySelector(".task-title").innerHTML=n.title,e.querySelector(".task-description").innerHTML=n.description,e.querySelector(".task-date").value=n.dueDate,e.querySelector("#projects-drop-down-edit").value=n.project,e.querySelector(`#create-new-${n.priority}`).checked=!0}(e),y()})),o.querySelector(".task--info").addEventListener("click",(()=>{!function(n){const e=document.querySelector(".task-info-pop-up");e.querySelector(".task-info-title").innerHTML=n.title,e.querySelector(".task-info-description>span:nth-child(2)").innerHTML=n.description,e.querySelector(".task-info-date>span:nth-child(2)").innerHTML=n.dueDate,e.querySelector(".task-info-project>span:nth-child(2)").innerHTML=n.project,e.querySelector(".task-info-priority>span:nth-child(2)").innerHTML=n.priority}(e),x()})),o.querySelector(".task--status").addEventListener("click",(()=>{const n=C(localStorage.getItem("all tasks")),t=n.projTaskList.indexOf(n.projTaskList.filter((n=>n.title===e.title))[0]);if(n.projTaskList[t].completed=!n.projTaskList[t].completed,localStorage.setItem("all tasks",g(n)),"all tasks"!==e.project){const n=C(localStorage.getItem(e.project)),t=n.projTaskList.indexOf(n.projTaskList.filter((n=>n.title===e.title))[0]);n.projTaskList[t].completed=!n.projTaskList[t].completed,localStorage.setItem(e.project,g(n))}yn()})),n.appendChild(o)}))}Bn.forEach((n=>{n.addEventListener("click",(()=>{kn.reset(),k()}))})),kn.addEventListener("submit",(n=>{n.preventDefault();const e=new FormData(n.target),t=[...e.entries()][0][1],o=[...e.entries()][1][1],r=[...e.entries()][2][1],a=[...e.entries()][3][1];!function(n,e,t,o,r="all tasks",a=!1){const i={title:n,description:e,dueDate:t,priority:o,completed:a,project:r};E.push(i);const s=C(localStorage.getItem("all tasks"));if(s.projTaskList.push(i),localStorage.setItem(s.title,g(s)),"all tasks"!==r){const n=C(localStorage.getItem(r));n.projTaskList.push(i),localStorage.setItem(n.title,g(n))}}(t,o,r,[...e.entries()][4][1],a),yn(),k()})),document.querySelector(".nav-item").addEventListener("click",(n=>{hn=C(localStorage.getItem("all tasks")).projTaskList,document.querySelectorAll(".nav-item").forEach((n=>n.classList.remove("nav-item-selected"))),n.target.classList.add("nav-item-selected"),yn()})),En(),yn()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,